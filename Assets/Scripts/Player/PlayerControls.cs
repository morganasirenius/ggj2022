//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/Scripts/Player/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Space"",
            ""id"": ""f657d817-06ef-4e53-8cee-6c5997d604a0"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""f085f965-4b37-41a5-bf20-5a7ffc5d58d8"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""27da4c32-1ba2-435d-b633-7c0387dad614"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LightBeam"",
                    ""type"": ""Button"",
                    ""id"": ""0578dda9-88ba-4045-8d4f-535b3c2b54d0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MousePosition"",
                    ""type"": ""PassThrough"",
                    ""id"": ""252b86f2-04d8-4f1c-932f-c9c8b7cc7e28"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Nuke"",
                    ""type"": ""Button"",
                    ""id"": ""44d531d3-c8e2-45d6-9f40-17bf5b73b7e8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""35effa1b-5e1d-4ffc-8d57-20d520d479c8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b9ffcf80-1711-42e4-b748-4f1f9b680355"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c7554699-fb0a-4dc5-b3e5-2001c756f583"",
                    ""path"": ""<Keyboard>/l"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""4d0f5754-3560-4b61-b180-7ef0a58f3076"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""501ef22a-db51-483a-8415-dd05f344f73c"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""1a2e6c6e-5cd6-4284-8904-46694e3ca2aa"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""e43262fd-5844-4d10-9764-45464f666d88"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""320286c4-7269-4206-a2bf-64234a07d9cf"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Arrow Keys"",
                    ""id"": ""4e13712c-2ced-4257-b93d-8b35f999d2b1"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""869d3438-4a9b-4fa1-afe9-679adec896fc"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""c59c6d3a-c1d0-4ea8-965b-67b3e3d31be8"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""6a420963-240c-4b62-afaa-0924f93d7e19"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""304b3412-edca-40f4-bcec-eccf493eb044"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""402c4ee1-44a6-430c-8c18-c0310e848d9a"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""30cf6833-8908-4bb5-835f-4f17ade0f5c8"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LightBeam"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""70453c6b-29b1-4f16-bf41-766338877b8b"",
                    ""path"": ""<Keyboard>/semicolon"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LightBeam"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7786d030-1ebf-460a-b115-1152a3749ad4"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6aada917-b603-4638-87ce-35885178d786"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ca922ed1-f682-477f-871b-21de23fd477c"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Nuke"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b7246210-a251-49cb-a7c3-b532e1463a87"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Space
        m_Space = asset.FindActionMap("Space", throwIfNotFound: true);
        m_Space_Move = m_Space.FindAction("Move", throwIfNotFound: true);
        m_Space_Shoot = m_Space.FindAction("Shoot", throwIfNotFound: true);
        m_Space_LightBeam = m_Space.FindAction("LightBeam", throwIfNotFound: true);
        m_Space_MousePosition = m_Space.FindAction("MousePosition", throwIfNotFound: true);
        m_Space_Nuke = m_Space.FindAction("Nuke", throwIfNotFound: true);
        m_Space_Pause = m_Space.FindAction("Pause", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Space
    private readonly InputActionMap m_Space;
    private ISpaceActions m_SpaceActionsCallbackInterface;
    private readonly InputAction m_Space_Move;
    private readonly InputAction m_Space_Shoot;
    private readonly InputAction m_Space_LightBeam;
    private readonly InputAction m_Space_MousePosition;
    private readonly InputAction m_Space_Nuke;
    private readonly InputAction m_Space_Pause;
    public struct SpaceActions
    {
        private @PlayerControls m_Wrapper;
        public SpaceActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Space_Move;
        public InputAction @Shoot => m_Wrapper.m_Space_Shoot;
        public InputAction @LightBeam => m_Wrapper.m_Space_LightBeam;
        public InputAction @MousePosition => m_Wrapper.m_Space_MousePosition;
        public InputAction @Nuke => m_Wrapper.m_Space_Nuke;
        public InputAction @Pause => m_Wrapper.m_Space_Pause;
        public InputActionMap Get() { return m_Wrapper.m_Space; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SpaceActions set) { return set.Get(); }
        public void SetCallbacks(ISpaceActions instance)
        {
            if (m_Wrapper.m_SpaceActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_SpaceActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_SpaceActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_SpaceActionsCallbackInterface.OnMove;
                @Shoot.started -= m_Wrapper.m_SpaceActionsCallbackInterface.OnShoot;
                @Shoot.performed -= m_Wrapper.m_SpaceActionsCallbackInterface.OnShoot;
                @Shoot.canceled -= m_Wrapper.m_SpaceActionsCallbackInterface.OnShoot;
                @LightBeam.started -= m_Wrapper.m_SpaceActionsCallbackInterface.OnLightBeam;
                @LightBeam.performed -= m_Wrapper.m_SpaceActionsCallbackInterface.OnLightBeam;
                @LightBeam.canceled -= m_Wrapper.m_SpaceActionsCallbackInterface.OnLightBeam;
                @MousePosition.started -= m_Wrapper.m_SpaceActionsCallbackInterface.OnMousePosition;
                @MousePosition.performed -= m_Wrapper.m_SpaceActionsCallbackInterface.OnMousePosition;
                @MousePosition.canceled -= m_Wrapper.m_SpaceActionsCallbackInterface.OnMousePosition;
                @Nuke.started -= m_Wrapper.m_SpaceActionsCallbackInterface.OnNuke;
                @Nuke.performed -= m_Wrapper.m_SpaceActionsCallbackInterface.OnNuke;
                @Nuke.canceled -= m_Wrapper.m_SpaceActionsCallbackInterface.OnNuke;
                @Pause.started -= m_Wrapper.m_SpaceActionsCallbackInterface.OnPause;
                @Pause.performed -= m_Wrapper.m_SpaceActionsCallbackInterface.OnPause;
                @Pause.canceled -= m_Wrapper.m_SpaceActionsCallbackInterface.OnPause;
            }
            m_Wrapper.m_SpaceActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Shoot.started += instance.OnShoot;
                @Shoot.performed += instance.OnShoot;
                @Shoot.canceled += instance.OnShoot;
                @LightBeam.started += instance.OnLightBeam;
                @LightBeam.performed += instance.OnLightBeam;
                @LightBeam.canceled += instance.OnLightBeam;
                @MousePosition.started += instance.OnMousePosition;
                @MousePosition.performed += instance.OnMousePosition;
                @MousePosition.canceled += instance.OnMousePosition;
                @Nuke.started += instance.OnNuke;
                @Nuke.performed += instance.OnNuke;
                @Nuke.canceled += instance.OnNuke;
                @Pause.started += instance.OnPause;
                @Pause.performed += instance.OnPause;
                @Pause.canceled += instance.OnPause;
            }
        }
    }
    public SpaceActions @Space => new SpaceActions(this);
    public interface ISpaceActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
        void OnLightBeam(InputAction.CallbackContext context);
        void OnMousePosition(InputAction.CallbackContext context);
        void OnNuke(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
    }
}
